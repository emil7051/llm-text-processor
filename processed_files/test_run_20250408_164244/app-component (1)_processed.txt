// src/App.js
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Pages
import HomePage from './pages/HomePage';
import ElectorateDetails from './pages/ElectorateDetails';
import ComparisonPage from './pages/ComparisonPage';
import AboutPage from './pages/AboutPage';

// Components
import Header from './components/layout/Header';
import Footer from './components/layout/Footer';
import LoadingIndicator from './components/layout/LoadingIndicator';

// Data services
import { loadElectoratesSummary, loadStates, loadAgencies } from './utils/dataLoader';

// Main App component
function App() {
  const [loading, setLoading] = useState(true);
  const [electorates, setElectorates] = useState([]);
  const [states, setStates] = useState({});
  const [agencies, setAgencies] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Load initial application data
    const loadInitialData = async () => {
      try {
        setLoading(true);

        // Load data in parallel
        const [electoratesData, statesData, agenciesData] = await Promise.all([
          loadElectoratesSummary(),
          loadStates(),
          loadAgencies()
        ]);

        setElectorates(electoratesData);
        setStates(statesData);
        setAgencies(agenciesData);
        setError(null);
      } catch (err) {
        console.error('Failed to load initial data:', err);
        setError('Failed to load application data. Please try refreshing the page.');
      } finally {
        setLoading(false);
      }
    };

    loadInitialData();
  }, []);

  // Application-wide data context
  const appData = {
    electorates,
    states,
    agencies
  };

  if (loading) {
    return <LoadingIndicator message="Loading electoral grants data..." />;
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-red-50">
        <div className="p-6 max-w-sm bg-white rounded-lg border border-red-200 shadow-md">
          <h2 className="text-xl font-bold text-red-700 mb-3">Error</h2>
          <p className="text-gray-700">{error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            Refresh Page
          </button>
        </div>
      </div>
    );
  }

  return (
    <Router>
      <div className="flex flex-col min-h-screen bg-gray-50">
        <Header />

        <main className="flex-grow container mx-auto px-4 py-6">
          <Routes>
            <Route 
              path="/" 
              element={<HomePage appData={appData} />} 
            />
            <Route 
              path="/electorate/:name" 
              element={<ElectorateDetails appData={appData} />} 
            />
            <Route 
              path="/compare/:electorateNames" 
              element={<ComparisonPage appData={appData} />} 
            />
            <Route 
              path="/about" 
              element={<AboutPage />} 
            />
          </Routes>
        </main>

        <Footer />
      </div>
    </Router>
  );
}

export default App;